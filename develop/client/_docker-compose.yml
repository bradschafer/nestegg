version: '3.4'

networks:
  web:
    external: true

volumes:
    notused:

services:

  ngdev:
    image: webclient:1.0
    build:
      context: .
      dockerfile: node.Dockerfile
      args:
        - NODE_ENV=development
    labels: 
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.frontend.rule=Host:clientdev.localhost
      - traefik.port=4200
    networks:
      - web
      - default
    ports:
       - "4000:4200"
       - "9876:9876"
       - "49153:49153"
    volumes:
      - .:/opt/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
     
      # docker-compose exec node npm install --save bower
      - ./package.json:/opt/package.json
      - ./package-lock.json:/opt/package-lock.json
     
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/app/node_modules
    environment:
      - NODE_ENV=development

  ngprod:
      image: webclientprod:1.0
      build:
        context: .
        dockerfile: nginx.Dockerfile
      ports:
        - '81:80'
      labels: 
        - traefik.enable=true
        - traefik.port=80
        - traefik.docker.network=web
        - traefik.frontend.rule=Host:client.localhost      
      networks:
      - web
      restart: on-failure
      logging:
        options:
          max-size: "500k" 
  
